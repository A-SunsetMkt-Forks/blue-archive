import url from 'node:url'

import { createRequire } from 'node:module'

process.argv = [process.argv[0], ...process.argv.slice(3)]

const fileUrl = url.pathToFileURL('esrun-1691030591160.tmp.mjs')

const require = createRequire(fileUrl)
// parser.ts
const langKeyMap = {
  TextJp: 'jp' /* jp */,
  TextCn: 'zh-CN' /* zhCN */,
  TextEn: 'en' /* en */,
  TextTw: 'zh-TW', /* zhTW */
}
function parseText(raw) {
  const stack = []
  let index = 0
  function h() {
  }
  const tagRe = /\[[/-\w]\]/
  while (index < raw.length) {
    const matched = tagRe.exec(raw)
    if (matched) {
      index = tagRe.lastIndex
      console.log(matched, index)
    }
  }
  return []
}
const test = [
  '[FF6666]\u2026\u2026\u6211\u3005\u306F\u671B\u3080\u3001\u4E03\u3064\u306E[-][ruby=\u306A\u3052][FF6666]\u5606[-][/ruby][FF6666]\u304D\u3092\u3002[-]',
  '[b]\u2026\u2026\u6211\u3005\u306F\u671B\u3080\u3001\u4E03\u3064\u306E\u5606[FF6666]\u304D\u3092\u3002[-][/b]',
]
console.log(parseText(test[0]))
// # sourceMappingURL=data:application/json;base64,
